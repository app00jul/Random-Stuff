# Stevens Institute of Technology, 2021

##########################################
# Name: Julian Noeske
# Pledge: I pledge my honor that I have abided by the Stevens Honor System
##########################################
from math import floor  # E.g., floor(5.3) -> 5, floor(3.9) -> 3
from functools import reduce
import string

######################################################################
# Task 1: Given an 8-digit decimal number representing the date,
#         calculate the day of the week using Zeller's congruence:
#
#           https://en.wikipedia.org/wiki/Zeller%27s_congruence
#
# Input:  8-digit decimal number in the format of YYYYMMDD
#
# Output: Weekday as a [0-6] number, where
#         0: Saturday, 1: Sunday, 2: Monday, ..., 6: Friday
######################################################################

def getWeekday():
    date_prompt = "Please enter the 8-digit decimal number in the format of YYYYMMDD!"
    date_prompt += "\n\tEnter here: "
    date = input(date_prompt)
    while len(date) != 8 or date.isnumeric() == False:
        print("Your input is in valid! \nPlease try again!")
        date = input(date_prompt)

    while int(date)%10000//100 > 12:
        print("\nYour month is not the correct format.")
        print("Please try again!")
        date = input(date_prompt)

    while int(date)%10000%100 > 31:
        print("\nYour day is not the correct format.")
        print("Please try again!")
        date = input(date_prompt)


    year = int(date) // 10000
    month_day = int(date) % 10000
    month = month_day // 100
    day = month_day % 100

    print(f"Valid input is: {date}")


    print(f"\nThe year is \t {year}")
    print(f"The month is \t {month}")
    print(f"The day is \t \t {day}")


    if month == 1 or month == 2:
        m = month + 12
        #print(m) #this is for debugging!
    else:
        m = month
        #print(m) #this is for debugging!

    h = (day + 13*(m + 1)//5 + year +year//4 + 5 - year//100)%7

    if h == 0:
        print("The day is Saturday!")
    elif h == 1:
        print("The day is Sunday!")
    elif h == 2:
        print("The day is Monday!")
    elif h == 3:
        print("The day is Tuesday!")
    elif h == 4:
        print("The day is Wednesday!")
    elif h == 5:
        print("The day is Thursday!")
    elif h == 6:
        print("The day is Friday!")

getWeekday()


##############################date########################################
# Task 2: Create two functions, an encoder and a decoder for the
#         Caesar cipher:
#
#           https://en.wikipedia.org/wiki/Caesar_cipher
#
# Note: You can try out this cipher at the link below:
#
#           https://cryptii.com/pipes/caesar-cipher
######################################################################

######################################################################
# This provided helper function may be useful
# Input:  List of ASCII values (Ex: [72, 69, 76, 76, 79])
# Output: String (Ex. 'HELLO')       'H   E   L   L   O'
######################################################################
def asciiToString(asciiList):
    print(''.join(map(chr,asciiList)))
    return ''.join(map(chr, asciiList))

######################################################################
# Caesar Encoder
#
# Input: A string (assume all-caps: leave everything else as-is),
#        and a shift value       (Ex. 'HELLO WORLD', 3)
#
# Output: An encoded string      (Ex. 'KHOOR ZRUOG')
#
# Hint: The ord() function converts single-character strings to ASCII
#       (Its inverse, the chr() function, is used in the provided helper)
######################################################################
letters = string.ascii_uppercase

def caesarEncoder(str, shift):
    '''
    lst_convert = list(str)
    #print(lst_convert) #this is for debugging

    ascii_convert = map(lambda x: ord(x), lst_convert)
    #print(ascii_convert) #this is for debugging

    caesar_encoder = map(lambda x: x + shift, ascii_convert)
    asciiToString(caesar_encoder)
    '''
    encrypted = ""
    for character in str:
        if character in letters:
            caesar_encode = ord(character) + shift
            encode = chr(caesar_encode)
            encrypted += encode
        else:
            caesar_encode = ord(character)
            encode = chr(caesar_encode)
            encrypted += encode

    print(f"Encrypted message is {encrypted}")


caesarEncoder("HELLO THERE", 3)

######################################################################
# Decoder
# Input: A string value with all capital letters (leave everything
#        else as-is) and a shift value (Ex. KHOOR ZRUOG, 3)
# Output: A decoded string             (Ex. HELLO WORLD)
# Hint: The chr() function converts ASCII to a single-character string
######################################################################
def caesarDecoder(str, shift):
    '''
    lst_convert = list(str)
    # print(lst_convert) #this is for debugging

    ascii_convert = map(lambda x: ord(x), lst_convert)
    # print(ascii_convert) #this is for debugging

    caesar_encoder = map(lambda x: x - shift, ascii_convert)
    asciiToString(caesar_encoder)
    '''
    decrypted = ""
    for character in str:
        if character in letters:
            caesar_decode = ord(character) - shift
            decode = chr(caesar_decode)
            decrypted += decode
        else:
            caesar_decode = ord(character)
            decode = chr(caesar_decode)
            decrypted += decode

    print(f"Decrypted message is {decrypted}")


caesarDecoder("KHOOR ZRUOG",3)
